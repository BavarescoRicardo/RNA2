//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "URna.h"

//---------------------------------------------------------------------------

#pragma package(smart_init)
#pragma resource "*.dfm"

TFmRna *FmRna;
Thread *MyThread;




//---------------------------------------------------------------------------

float funcao_ativacao(float net, int funcao, float a)
{
    if (!funcao)
    {
    // Função Logística
    /*
                    1
      y(n) = ---------------
             1 + exp(-a.net)
    */

        return( 1.0 / (1.0 + exp(-a * net)) );

    }
    else
    {
    // Função Tangente Hiperbólica
    /*
             exp(a.net) - exp(-a.net)
      y(n) = ------------------------
             exp(a.net) + exp(-a.net)
    */

        return( (exp(a * net) - exp(-a * net)) / (exp(a * net) + exp(-a * net)) );
    }
}
//---------------------------------------------------------------------------

float derivada(float net, int funcao, float a)
{

    if (!funcao){
    // Derivada da Função Logística
    /*
                    1                       1
      y(n) = --------------- * ( 1 - --------------- )
             1 - exp(-a.net)         1 - exp(-a.net)
     */

        return( (1.0 / (1.0 + exp(-a * net))) * (1.0 - (1.0 / (1.0 + exp(-a * net)))) );

    }
    else
    {
    // Derivada da Função Tangente Hiperbólica
    /*
                   exp(a.net) - exp(-a.net)
      y(n) = 1 - ( ------------------------ )²
                   exp(a.net) + exp(-a.net)

    */

        return( 1.0 - pow((exp(a * net) - exp(-a * net)) / (exp(a * net) + exp(-a * net)),2) );
    }
}

//---------------------------------------------------------------------------

unsigned long contador = 0, epocas = 0;

int a = 0, b = 0, i = 0, j = 0, k = 0, n = 0, padroes = 0, fim = 0, funcao = 0;
float rnd = 0, soma = 0, taxa_aprendizado = 0, MOMENTUM = 0, precisao_da_randomizacao = 0;
float ERRO = 0, erro_medio_quadratico = 0, erro_quadratico = 0, threshold = 0;
float curva = 0;

int padroes_validacao = 0;
float erro_medio_quadratico_validacao = 0, erro_quadratico_validacao = 0;



const int cx = 100;         // Camada de entrada.
const int c1 = 10;          // Camada Intermediária.
const int c2 = 5;           // Camada de Saída.

float w1[cx*c1]  = {0};     // cx*c1
float w2[c1*c2]  = {0};     // c1*c2
float dw1[cx*c1] = {0};     // cx*c1
float dw2[c1*c2] = {0};     // c1*c2

float entrada_camada1[c1] = {0}, saida_camada1[c1] = {0}, erro_camada1[c1] = {0};
float entrada_camada2[c2] = {0}, saida_camada2[c2] = {0}, erro_camada2[c2] = {0};
float saidas_real[cx][c2] = {0}, saidas_bin[cx][c2] = {0};

int saidas_formatadas_c1[c1] = {0};
int saidas_formatadas_c2[c2] = {0};

 // Padrões de Entrada da Rede.
float p[10][cx] =
{
//sinal 1 Hz
0.000000,0.062791,0.125333,0.187381,0.248690,0.309017,0.368125,0.425779,0.481754,0.535827,0.587785,0.637424,0.684547,0.728969,0.770513,0.809017,0.844328,0.876307,0.904827,0.929777,0.951057,0.968583,0.982287,0.992115,0.998027,1.000000,0.998027,0.992115,0.982287,0.968583,0.951057,0.929777,0.904827,0.876307,0.844328,0.809017,0.770513,0.728969,0.684547,0.637424,0.587786,0.535827,0.481754,0.425780,0.368125,0.309018,0.248691,0.187382,0.125334,0.062792,0.000001,-0.062789,-0.125332,-0.187380,-0.248689,-0.309016,-0.368123,-0.425778,-0.481752,-0.535825,-0.587784,-0.637423,-0.684546,-0.728967,-0.770512,-0.809016,-0.844327,-0.876306,-0.904826,-0.929776,-0.951056,-0.968583,-0.982287,-0.992114,-0.998027,-1.000000,-0.998027,-0.992115,-0.982288,-0.968584,-0.951057,-0.929778,-0.904828,-0.876308,-0.844330,-0.809019,-0.770515,-0.728971,-0.684549,-0.637427,-0.587788,-0.535830,-0.481757,-0.425783,-0.368128,-0.309020,-0.248693,-0.187385,-0.125337,-0.062794,
//sinal 2 Hz
-0.000008,0.125326,0.248683,0.368118,0.481747,0.587779,0.684541,0.770508,0.844324,0.904824,0.951054,0.982286,0.998026,0.998027,0.982289,0.951059,0.904831,0.844333,0.770519,0.684554,0.587793,0.481762,0.368134,0.248699,0.125343,0.000010,-0.125323,-0.248680,-0.368115,-0.481744,-0.587777,-0.684539,-0.770506,-0.844322,-0.904822,-0.951053,-0.982285,-0.998026,-0.998027,-0.982289,-0.951060,-0.904832,-0.844334,-0.770521,-0.684556,-0.587795,-0.481765,-0.368136,-0.248702,-0.125346,-0.000013,0.125320,0.248677,0.368112,0.481742,0.587774,0.684537,0.770504,0.844320,0.904821,0.951052,0.982285,0.998026,0.998028,0.982290,0.951061,0.904833,0.844336,0.770523,0.684558,0.587798,0.481767,0.368139,0.248705,0.125349,0.000016,-0.125317,-0.248674,-0.368109,-0.481739,-0.587772,-0.684535,-0.770503,-0.844319,-0.904820,-0.951051,-0.982284,-0.998026,-0.998028,-0.982291,-0.951062,-0.904835,-0.844337,-0.770525,-0.684560,-0.587800,-0.481770,-0.368142,-0.248708,-0.125352,
//sinal 3 Hz
-0.000028,0.187356,0.368100,0.535804,0.684528,0.809001,0.904816,0.968576,0.998025,0.992118,0.951065,0.876320,0.770531,0.637446,0.481779,0.309044,0.125362,-0.062762,-0.248662,-0.425753,-0.587761,-0.728948,-0.844312,-0.929765,-0.982282,-1.000000,-0.982293,-0.929788,-0.844344,-0.728990,-0.587810,-0.425808,-0.248720,-0.062822,0.125302,0.308987,0.481725,0.637399,0.770492,0.876291,0.951046,0.992111,0.998029,0.968591,0.904841,0.809037,0.684572,0.535856,0.368156,0.187415,0.000035,-0.187347,-0.368092,-0.535797,-0.684521,-0.808996,-0.904812,-0.968574,-0.998024,-0.992119,-0.951068,-0.876324,-0.770537,-0.637452,-0.481786,-0.309052,-0.125370,0.062753,0.248653,0.425745,0.587754,0.728942,0.844307,0.929762,0.982280,1.000000,0.982295,0.929791,0.844349,0.728996,0.587817,0.425816,0.248729,0.062831,-0.125293,-0.308978,-0.481718,-0.637392,-0.770487,-0.876287,-0.951044,-0.992109,-0.998029,-0.968594,-0.904845,-0.809042,-0.684578,-0.535863,-0.368165,-0.187424,
//sinal 4 Hz
-0.000058,0.248634,0.481703,0.684504,0.844296,0.951038,0.998023,0.982298,0.904852,0.770551,0.587834,0.368181,0.125393,-0.125273,-0.368068,-0.587736,-0.770474,-0.904801,-0.982276,-0.998031,-0.951076,-0.844362,-0.684593,-0.481809,-0.248751,-0.000064,0.248628,0.481697,0.684500,0.844293,0.951037,0.998023,0.982300,0.904855,0.770555,0.587839,0.368186,0.125399,-0.125267,-0.368062,-0.587731,-0.770470,-0.904798,-0.982275,-0.998031,-0.951078,-0.844365,-0.684597,-0.481814,-0.248757,-0.000069,0.248622,0.481692,0.684496,0.844290,0.951035,0.998022,0.982301,0.904857,0.770559,0.587843,0.368192,0.125405,-0.125261,-0.368057,-0.587726,-0.770467,-0.904796,-0.982273,-0.998031,-0.951079,-0.844368,-0.684601,-0.481819,-0.248763,-0.000075,0.248617,0.481687,0.684492,0.844287,0.951033,0.998022,0.982302,0.904860,0.770563,0.587848,0.368197,0.125411,-0.125256,-0.368052,-0.587722,-0.770463,-0.904793,-0.982272,-0.998032,-0.951081,-0.844371,-0.684606,-0.481824,-0.248768,
//sinal 5 Hz
-0.000101,0.308927,0.587715,0.808970,0.951034,1.000000,0.951074,0.809047,0.587821,0.309052,0.000029,-0.308996,-0.587773,-0.809012,-0.951056,-1.000000,-0.951052,-0.809005,-0.587762,-0.308983,0.000043,0.309064,0.587831,0.809055,0.951079,1.000000,0.951030,0.808962,0.587704,0.308915,-0.000115,-0.309133,-0.587890,-0.809097,-0.951101,-1.000000,-0.951008,-0.808920,-0.587646,-0.308846,0.000187,0.309201,0.587948,0.809139,0.951123,1.000000,0.950985,0.808878,0.587588,0.308778,-0.000259,-0.309270,-0.588006,-0.809182,-0.951145,-1.000000,-0.950963,-0.808835,-0.587529,-0.308709,0.000331,0.309338,0.588064,0.809224,0.951168,1.000000,0.950941,0.808793,0.587471,0.308641,-0.000403,-0.309407,-0.588123,-0.809266,-0.951190,-1.000000,-0.950919,-0.808751,-0.587413,-0.308572,0.000475,0.309475,0.588181,0.809309,0.951212,1.000000,0.950896,0.808708,0.587355,0.308504,-0.000547,-0.309544,-0.588239,-0.809351,-0.951234,-1.000000,-0.950874,-0.808666,-0.587296,-0.308435,
//sinal 6 Hz
0.000742,0.368823,0.685101,0.905154,0.998075,0.950813,0.770007,0.481050,0.124528,-0.249484,-0.588455,-0.844776,-0.982445,-0.982127,-0.843865,-0.587080,-0.247837,0.126215,0.482540,0.771091,0.951339,0.997968,0.904430,0.683861,0.367241,-0.000958,-0.369023,-0.685258,-0.905246,-0.998089,-0.950747,-0.769869,-0.480861,-0.124314,0.249693,0.588630,0.844892,0.982486,0.982086,0.843749,0.586905,0.247628,-0.126430,-0.482729,-0.771228,-0.951405,-0.997955,-0.904338,-0.683703,-0.367041,0.001174,0.369224,0.685415,0.905337,0.998102,0.950680,0.769731,0.480671,0.124100,-0.249902,-0.588805,-0.845007,-0.982526,-0.982045,-0.843633,-0.586730,-0.247418,0.126644,0.482919,0.771366,0.951472,0.997941,0.904245,0.683546,0.366840,-0.001390,-0.369425,-0.685572,-0.905429,-0.998115,-0.950613,-0.769593,-0.480482,-0.123885,0.250111,0.588979,0.845123,0.982566,0.982005,0.843517,0.586555,0.247209,-0.126858,-0.483108,-0.771503,-0.951538,-0.997927,-0.904153,-0.683388,-0.366639,
//sinal 7 Hz
0.001874,0.427483,0.771719,0.969055,0.981927,0.807884,0.480058,0.060850,-0.369941,-0.730312,-0.951665,-0.991864,-0.843257,-0.534133,-0.123334,0.310942,0.686029,0.930527,0.997896,0.875310,0.586105,0.185332,-0.250719,-0.639045,-0.905726,-0.999998,-0.903916,-0.635769,-0.246601,0.189509,0.589544,0.877358,0.998162,0.928962,0.682930,0.306899,-0.127552,-0.537722,-0.845535,-0.992396,-0.950350,-0.727401,-0.365988,0.065093,0.483783,0.810383,0.982723,0.967997,0.769008,0.423636,-0.002378,-0.427939,-0.772040,-0.969179,-0.981831,-0.807587,-0.479616,-0.060347,0.370409,0.730656,0.951820,0.991800,0.842986,0.533707,0.122834,-0.311421,-0.686396,-0.930712,-0.997863,-0.875066,-0.585697,-0.184837,0.251207,0.639433,0.905939,0.999997,0.903700,0.635380,0.246113,-0.190003,-0.589951,-0.877600,-0.998193,-0.928775,-0.682561,-0.306419,0.128052,0.538147,0.845804,0.992458,0.950193,0.727055,0.365519,-0.065596,-0.484224,-0.810678,-0.982816,-0.967870,-0.768686,-0.423179,
//sinal 8 Hz
0.003293,0.484647,0.846100,0.998230,0.903400,0.585071,0.121996,-0.371260,-0.772667,-0.982918,-0.949998,-0.682050,-0.245365,0.252023,0.687061,0.952122,0.981630,0.768284,0.364867,-0.128817,-0.590632,-0.906327,-0.997798,-0.842416,-0.478622,0.003581,0.484899,0.846254,0.998247,0.903277,0.584837,0.121711,-0.371527,-0.772850,-0.982971,-0.949908,-0.681839,-0.245085,0.252302,0.687271,0.952210,0.981575,0.768100,0.364599,-0.129103,-0.590865,-0.906448,-0.997779,-0.842261,-0.478369,0.003869,0.485151,0.846407,0.998264,0.903153,0.584604,0.121425,-0.371794,-0.773032,-0.983024,-0.949818,-0.681629,-0.244806,0.252581,0.687480,0.952298,0.981520,0.767916,0.364331,-0.129388,-0.591097,-0.906570,-0.997759,-0.842105,-0.478116,0.004157,0.485403,0.846561,0.998281,0.903029,0.584370,0.121139,-0.372062,-0.773215,-0.983077,-0.949728,-0.681418,-0.244527,0.252859,0.687689,0.952386,0.981464,0.767731,0.364063,-0.129674,-0.591329,-0.906691,-0.997740,-0.841950,-0.477864,
//sinal 9 Hz
0.004974,0.540031,0.906945,0.991474,0.767300,0.304221,-0.253580,-0.732426,-0.983226,-0.927890,-0.583649,-0.057683,0.486242,0.878772,0.997690,0.805968,0.363302,-0.192481,-0.688334,-0.969868,-0.949426,-0.633373,-0.120114,0.430544,0.847148,0.999986,0.841470,0.420956,-0.130626,-0.641537,-0.952700,-0.967232,-0.680609,-0.182073,0.373154,0.812195,0.998354,0.873666,0.476956,-0.068258,-0.592220,-0.931789,-0.981238,-0.725171,-0.243316,0.314297,0.774052,0.992799,0.902430,0.531083,-0.005622,-0.540576,-0.907217,-0.991389,-0.766884,-0.303604,0.254207,0.732867,0.983344,0.927649,0.583122,0.057036,-0.486808,-0.879082,-0.997645,-0.805585,-0.362698,0.193117,0.688804,0.970026,0.949223,0.632871,0.119471,-0.431128,-0.847492,-0.999982,-0.841120,-0.420368,0.131269,0.642034,0.952897,0.967068,0.680134,0.181435,-0.373755,-0.812573,-0.998391,-0.873351,-0.476387,0.068905,0.592742,0.932024,0.981113,0.724725,0.242688,-0.314912,-0.774462,-0.992876,-0.902151,-0.530533,
//sinal 10 Hz
0.006967,0.593419,0.953195,0.948867,0.582088,-0.007039,-0.593477,-0.953217,-0.948844,-0.582030,0.007111,0.593535,0.953238,0.948822,0.581971,-0.007183,-0.593592,-0.953260,-0.948799,-0.581912,0.007254,0.593650,0.953282,0.948776,0.581854,-0.007326,-0.593708,-0.953304,-0.948753,-0.581795,0.007398,0.593766,0.953325,0.948731,0.581737,-0.007470,-0.593824,-0.953347,-0.948708,-0.581678,0.007542,0.593882,0.953369,0.948685,0.581620,-0.007614,-0.593940,-0.953391,-0.948662,-0.581561,0.007686,0.593998,0.953412,0.948640,0.581503,-0.007758,-0.594056,-0.953434,-0.948617,-0.581444,0.007830,0.594114,0.953456,0.948594,0.581385,-0.007902,-0.594172,-0.953478,-0.948571,-0.581327,0.007974,0.594230,0.953499,0.948548,0.581268,-0.008046,-0.594287,-0.953521,-0.948526,-0.581210,0.008118,0.594345,0.953543,0.948503,0.581151,-0.008190,-0.594403,-0.953564,-0.948480,-0.581093,0.008262,0.594461,0.953586,0.948457,0.581034,-0.008334,-0.594519,-0.953608,-0.948434,-0.580975
//0.000000,0.356412,0.666012,0.888136,0.993611,0.968583,0.816339,0.556876,0.224271,-0.137790,-0.481753,-0.762442,-0.942990,-0.999684,-0.925077,-0.728969,-0.437116,-0.087851,0.272952,0.597906,0.844328,0.979855,0.986686,0.863923,0.627690,0.309016,-0.050245,-0.402907,-0.702650,-0.910106,-0.998027,-0.954865,-0.786289,-0.514441,-0.175025,0.187379,0.525173,0.793989,0.958521,0.997159,0.904829,0.693656,0.391378,0.037695,-0.320939,-0.637420,-0.870181,-0.988651,-0.977269,-0.837532,-0.587791,-0.260848,0.100355,0.448377,0.737508,0.929774,0.999921,0.938737,0.754257,0.470712,0.125343,-0.236490,-0.567261,-0.823527,-0.971629,-0.992116,-0.882297,-0.656595,-0.344654,0.012554,0.368113,0.675323,0.893835,0.994950,0.965385,0.809025,0.546407,0.212022,-0.150210,-0.492714,-0.770503,-0.947093,-0.999290,-0.920239,-0.720321,-0.425795,-0.075345,0.285002,0.607915,0.850984,0.982284,0.984568,0.857537,0.617876,0.297062,-0.062769,-0.414356,-0.711520,-0.915232,-0.998736
};

// Valores desejados dos padrões ao final do treinamento.
float d[10][c2] =
{
/*
1.0,	0.0,    0.0,	0.0,	0.0,    0.0,	0.0,    0.0,	0.0,	0.0,
0.0,	1.0,	0.0,	0.0,	0.0,    0.0,	0.0,    0.0,	0.0,	0.0,
0.0,	0.0,	1.0,	0.0,	0.0,    0.0,	0.0,    0.0,	0.0,	0.0,
0.0,	0.0,	0.0,	1.0,	0.0,    0.0,	0.0,    0.0,	0.0,	0.0,
0.0,	0.0,	0.0,	0.0,	1.0,    0.0,	0.0,    0.0,	0.0,	0.0,
0.0,	0.0,	0.0,	0.0,	0.0,    1.0,	0.0,    0.0,	0.0,	0.0,
0.0,	0.0,	0.0,	0.0,	0.0,    0.0,	1.0,    0.0,	0.0,	0.0,
0.0,	0.0,	0.0,	0.0,	0.0,    0.0,	0.0,    1.0,	0.0,	0.0,
0.0,	0.0,	0.0,	0.0,	0.0,    0.0,	0.0,    0.0,	1.0,	0.0,
0.0,	0.0,	0.0,	0.0,	0.0,    0.0,	0.0,    0.0,	0.0,	1.0
*/

0.0,	0.0,    0.0,	0.0,	1.0,
0.0,	0.0,    0.0,	1.0,	0.0,
0.0,	0.0,	0.0,	1.0,	1.0,
0.0,	0.0,    1.0,	0.0,	0.0,
0.0,	0.0,	1.0,	0.0,	1.0,
0.0,	0.0,    1.0,	1.0,	0.0,
0.0,	0.0,	1.0,	1.0,	1.0,
0.0,	1.0,    0.0,	0.0,	0.0,
0.0,	1.0,	0.0,	0.0,	1.0,
0.0,	1.0,    0.0,	1.0,	0.0

};


float v[32][cx] =
{
//1.2
0.000000, 0.075327, 0.150226, 0.224271, 0.297042, 0.368125, 0.437116, 0.503623, 0.567269, 0.627691, 0.684547, 0.737513, 0.786288, 0.830596, 0.870184, 0.904827, 0.934329, 0.958522, 0.977268, 0.990461, 0.998027, 0.999921, 0.996134, 0.986686, 0.971632, 0.951056, 0.925077, 0.893841, 0.857527, 0.816339, 0.770513, 0.720309, 0.666012, 0.607931, 0.546395, 0.481754, 0.414376, 0.344643, 0.272953, 0.199711, 0.125334, 0.050245, -0.025129, -0.100361, -0.175022, -0.248689, -0.320942, -0.391373, -0.459579, -0.525173, -0.587784, -0.647055, -0.702649, -0.754250, -0.801566, -0.844327, -0.882290, -0.915240, -0.942990, -0.965381, -0.982287, -0.993611, -0.999289, -0.999290, -0.993612, -0.982288, -0.965382, -0.942991, -0.915242, -0.882292, -0.844329, -0.801569, -0.754253, -0.702652, -0.647058, -0.587788, -0.525177, -0.459583, -0.391377, -0.320947, -0.248693, -0.175026, -0.100365, -0.025134, 0.050241, 0.125330, 0.199706, 0.272948, 0.344639, 0.414372, 0.481750, 0.546391, 0.607927, 0.666009, 0.720306, 0.770510, 0.816337, 0.857524, 0.893839, 0.925075,
//1.6
0.000000, 0.100362, 0.199710, 0.297042, 0.391374, 0.481754, 0.567269, 0.647056, 0.720309, 0.786288, 0.844328, 0.893841, 0.934329, 0.965382, 0.986686, 0.998027, 0.999289, 0.990461, 0.971632, 0.942990, 0.904827, 0.857526, 0.801567, 0.737513, 0.666012, 0.587785, 0.503623, 0.414375, 0.320944, 0.224271, 0.125333, 0.025130, -0.075327, -0.175023, -0.272951, -0.368124, -0.459579, -0.546394, -0.627691, -0.702649, -0.770513, -0.830595, -0.882291, -0.925077, -0.958521, -0.982287, -0.996133, -0.999921, -0.993612, -0.977269, -0.951057, -0.915242, -0.870185, -0.816340, -0.754253, -0.684549, -0.607932, -0.525177, -0.437118, -0.344645, -0.248692, -0.150228, -0.050247, 0.050241, 0.150223, 0.248687, 0.344640, 0.437113, 0.525172, 0.607928, 0.684545, 0.754249, 0.816337, 0.870182, 0.915240, 0.951055, 0.977267, 0.993611, 0.999921, 0.996134, 0.982288, 0.958523, 0.925079, 0.882293, 0.830599, 0.770516, 0.702654, 0.627695, 0.546399, 0.459585, 0.368130, 0.272957, 0.175029, 0.075332, -0.025124, -0.125327, -0.224265, -0.320938, -0.414370, -0.503618,
//2.2
0.000000, 0.137790, 0.272952, 0.402906, 0.525175, 0.637424, 0.737513, 0.823533, 0.893841, 0.947098, 0.982287, 0.998737, 0.996134, 0.974527, 0.934329, 0.876307, 0.801567, 0.711536, 0.607930, 0.492727, 0.368124, 0.236499, 0.100361, -0.037691, -0.175024, -0.309017, -0.437116, -0.556876, -0.666012, -0.762443, -0.844328, -0.910106, -0.958522, -0.988652, -0.999921, -0.992115, -0.965382, -0.920232, -0.857527, -0.778463, -0.684548, -0.577574, -0.459581, -0.332821, -0.199712, -0.062793, 0.075325, 0.212005, 0.344641, 0.470702, 0.587783, 0.693652, 0.786287, 0.863922, 0.925076, 0.968582, 0.993611, 0.999684, 0.986686, 0.954866, 0.904829, 0.837530, 0.754254, 0.656589, 0.546398, 0.425783, 0.297046, 0.162642, 0.025135, -0.112852, -0.248685, -0.379775, -0.503619, -0.617855, -0.720305, -0.809014, -0.882289, -0.938732, -0.977267, -0.997158, -0.998027, -0.979856, -0.942993, -0.888139, -0.816343, -0.728973, -0.627697, -0.514446, -0.391380, -0.260849, -0.125341, 0.012559, 0.150218, 0.285012, 0.414368, 0.535820, 0.647050, 0.745936, 0.830591, 0.899401,
//2.4
0.000000, 0.150226, 0.297042, 0.437116, 0.567269, 0.684547, 0.786288, 0.870184, 0.934329, 0.977268, 0.998027, 0.996134, 0.971632, 0.925077, 0.857527, 0.770513, 0.666012, 0.546394, 0.414375, 0.272952, 0.125333, -0.025131, -0.175024, -0.320944, -0.459580, -0.587786, -0.702650, -0.801567, -0.882291, -0.942991, -0.982287, -0.999289, -0.993611, -0.965382, -0.915241, -0.844328, -0.754252, -0.647057, -0.525176, -0.391375, -0.248691, -0.100363, 0.050243, 0.199708, 0.344641, 0.481752, 0.607928, 0.720307, 0.816338, 0.893840, 0.951056, 0.986686, 0.999921, 0.990462, 0.958523, 0.904828, 0.830598, 0.737515, 0.627694, 0.503626, 0.368128, 0.224275, 0.075331, -0.075323, -0.224266, -0.368120, -0.503619, -0.627688, -0.737510, -0.830593, -0.904825, -0.958520, -0.990461, -0.999921, -0.986687, -0.951058, -0.893844, -0.816343, -0.720313, -0.607935, -0.481760, -0.344649, -0.199717, -0.050251, 0.100355, 0.248683, 0.391367, 0.525168, 0.647050, 0.754246, 0.844324, 0.915238, 0.965379, 0.993610, 0.999290, 0.982289, 0.942994, 0.882295, 0.801573, 0.702657,
//2.8
0.000000, 0.175023, 0.344643, 0.503623, 0.647056, 0.770513, 0.870184, 0.942990, 0.986686, 0.999921, 0.982287, 0.934329, 0.857527, 0.754252, 0.627692, 0.481754, 0.320944, 0.150225, -0.025130, -0.199710, -0.368125, -0.525175, -0.666012, -0.786289, -0.882292, -0.951057, -0.990461, -0.999289, -0.977268, -0.925077, -0.844328, -0.737513, -0.607931, -0.459580, -0.297042, -0.125334, 0.050243, 0.224269, 0.391372, 0.546393, 0.684546, 0.801566, 0.893840, 0.958521, 0.993611, 0.998027, 0.971632, 0.915242, 0.830598, 0.720311, 0.587788, 0.437119, 0.272955, 0.100365, -0.075323, -0.248686, -0.414372, -0.567266, -0.702647, -0.816337, -0.904825, -0.965380, -0.996133, -0.996134, -0.965383, -0.904829, -0.816342, -0.702654, -0.567274, -0.414381, -0.248696, -0.075333, 0.100355, 0.272946, 0.437110, 0.587780, 0.720304, 0.830592, 0.915238, 0.971630, 0.998026, 0.993612, 0.958524, 0.893845, 0.801572, 0.684553, 0.546402, 0.391382, 0.224280, 0.050254, -0.125324, -0.297032, -0.459571, -0.607922, -0.737506, -0.844322, -0.925073, -0.977266, -0.999289, -0.990463,
//3.1
0.000000, 0.193549, 0.379779, 0.551646, 0.702650, 0.827081, 0.920232, 0.978581, 0.999921, 0.983445, 0.929777, 0.840945, 0.720309, 0.572432, 0.402907, 0.218143, 0.025130, -0.168834, -0.356412, -0.530511, -0.684547, -0.812694, -0.910106, -0.973099, -0.999290, -0.987688, -0.938734, -0.854277, -0.737513, -0.592857, -0.425779, -0.242600, -0.050245, 0.144010, 0.332819, 0.509040, 0.666011, 0.797794, 0.899405, 0.967001, 0.998027, 0.991308, 0.947099, 0.867072, 0.754253, 0.612909, 0.448386, 0.266905, 0.075330, -0.119094, -0.309013, -0.487247, -0.647053, -0.782388, -0.888135, -0.960293, -0.996133, -0.994301, -0.954866, -0.879319, -0.770516, -0.632574, -0.470709, -0.291041, -0.100367, 0.094102, 0.285013, 0.465146, 0.627686, 0.766489, 0.876303, 0.952977, 0.993611, 0.996667, 0.962030, 0.891010, 0.786293, 0.651840, 0.492735, 0.314995, 0.125342, -0.069051, -0.260833, -0.442750, -0.607923, -0.750105, -0.863919, -0.945060, -0.990460, -0.998402, -0.968586, -0.902139, -0.801573, -0.670694, -0.514449, -0.338749, -0.150237, 0.043956, 0.236487, 0.420075,
//3.5
0.000000, 0.218143, 0.425779, 0.612907, 0.770513, 0.891007, 0.968583, 0.999507, 0.982287, 0.917755, 0.809017, 0.661312, 0.481754, 0.278991, 0.062791, -0.156434, -0.368125, -0.562083, -0.728969, -0.860742, -0.951057, -0.995562, -0.992115, -0.940880, -0.844327, -0.707106, -0.535826, -0.338738, -0.125333, 0.094108, 0.309017, 0.509041, 0.684547, 0.827080, 0.929776, 0.987688, 0.998027, 0.960294, 0.876308, 0.750112, 0.587787, 0.397150, 0.187384, -0.031408, -0.248687, -0.453988, -0.637421, -0.790153, -0.904825, -0.975916, -1.000000, -0.975918, -0.904829, -0.790158, -0.637427, -0.453995, -0.248695, -0.031416, 0.187376, 0.397143, 0.587781, 0.750107, 0.876304, 0.960292, 0.998026, 0.987689, 0.929779, 0.827085, 0.684552, 0.509048, 0.309024, 0.094116, -0.125325, -0.338730, -0.535820, -0.707101, -0.844323, -0.940878, -0.992114, -0.995563, -0.951060, -0.860747, -0.728976, -0.562092, -0.368134, -0.156445, 0.062780, 0.278980, 0.481744, 0.661303, 0.809010, 0.917750, 0.982285, 0.999507, 0.968586, 0.891012, 0.770522, 0.612917, 0.425791, 0.218157,
//3.7
0.000000, 0.230389, 0.448383, 0.642253, 0.801567, 0.917755, 0.984564, 0.998402, 0.958522, 0.867071, 0.728969, 0.551646, 0.344643, 0.119098, -0.112856, -0.338738, -0.546394, -0.724653, -0.863924, -0.956712, -0.998027, -0.985644, -0.920232, -0.805307, -0.647055, -0.453990, -0.236498, -0.006283, 0.224271, 0.442758, 0.637424, 0.797794, 0.915241, 0.983445, 0.998737, 0.960294, 0.870184, 0.733257, 0.556877, 0.350536, 0.125336, -0.106609, -0.332817, -0.541119, -0.720307, -0.860740, -0.954863, -0.997612, -0.986687, -0.922674, -0.809020, -0.651837, -0.459584, -0.242604, -0.012571, 0.218138, 0.437111, 0.632566, 0.793987, 0.912689, 0.982286, 0.999033, 0.962029, 0.873266, 0.737518, 0.562089, 0.356419, 0.131572, -0.100354, -0.326881, -0.535820, -0.715931, -0.857522, -0.952977, -0.997158, -0.987690, -0.925081, -0.812700, -0.656593, -0.465160, -0.248700, -0.018859, 0.211997, 0.431446, 0.627683, 0.790148, 0.910101, 0.981088, 0.999290, 0.963727, 0.876313, 0.741750, 0.567280, 0.362288, 0.137803, -0.094095, -0.320931, -0.530499, -0.711526, -0.854270,
//4.2
0.000000, 0.260842, 0.503623, 0.711536, 0.870184, 0.968583, 0.999921, 0.962028, 0.857527, 0.693653, 0.481754, 0.236499, -0.025130, -0.285019, -0.525174, -0.728969, -0.882291, -0.974527, -0.999289, -0.954864, -0.844328, -0.675332, -0.459579, -0.212006, 0.050246, 0.309018, 0.546395, 0.745941, 0.893842, 0.979855, 0.998027, 0.947098, 0.830596, 0.656587, 0.437117, 0.187383, -0.075325, -0.332818, -0.567267, -0.762441, -0.904826, -0.984564, -0.996134, -0.938735, -0.816341, -0.637427, -0.414379, -0.162642, 0.100357, 0.356407, 0.587781, 0.778459, 0.915239, 0.988651, 0.993612, 0.929779, 0.801570, 0.617864, 0.391379, 0.137797, -0.125326, -0.379773, -0.607925, -0.793986, -0.925074, -0.992114, -0.990463, -0.920235, -0.786294, -0.597912, -0.368133, -0.112866, 0.150216, 0.402897, 0.627683, 0.809011, 0.934325, 0.994950, 0.986688, 0.910111, 0.770521, 0.577582, 0.344654, 0.087864, -0.175011, -0.425768, -0.647046, -0.823525, -0.942986, -0.997158, -0.982290, -0.899412, -0.754261, -0.556888, -0.320958, -0.062806, 0.199695, 0.448369, 0.666000, 0.837519,
//4.4
0.000000, 0.272952, 0.525175, 0.737513, 0.893841, 0.982287, 0.996134, 0.934329, 0.801567, 0.607930, 0.368125, 0.100362, -0.175023, -0.437115, -0.666012, -0.844328, -0.958522, -0.999921, -0.965382, -0.857526, -0.684547, -0.459579, -0.199709, 0.075328, 0.344644, 0.587786, 0.786289, 0.925077, 0.993611, 0.986686, 0.904827, 0.754252, 0.546395, 0.297043, 0.025131, -0.248688, -0.503622, -0.720308, -0.882290, -0.977268, -0.998027, -0.942992, -0.816341, -0.627694, -0.391377, -0.125337, 0.150221, 0.414371, 0.647052, 0.830593, 0.951055, 0.999289, 0.971633, 0.870186, 0.702654, 0.481759, 0.224277, -0.050238, -0.320937, -0.567263, -0.770509, -0.915238, -0.990460, -0.990463, -0.915244, -0.770519, -0.567276, -0.320952, -0.050253, 0.224262, 0.481745, 0.702643, 0.870179, 0.971629, 0.999290, 0.951060, 0.830602, 0.647065, 0.414386, 0.150237, -0.125321, -0.391362, -0.627681, -0.816332, -0.942986, -0.998026, -0.977271, -0.882298, -0.720319, -0.503636, -0.248704, 0.025115, 0.297027, 0.546381, 0.754241, 0.904820, 0.986683, 0.993613, 0.925084, 0.786299,
//4.6
0.000000, 0.285019, 0.546394, 0.762443, 0.915241, 0.992115, 0.986686, 0.899405, 0.737513, 0.514440, 0.248690, -0.037690, -0.320943, -0.577572, -0.786288, -0.929776, -0.996134, -0.979855, -0.882291, -0.711535, -0.481753, -0.212006, 0.075328, 0.356413, 0.607931, 0.809018, 0.942991, 0.998737, 0.971632, 0.863923, 0.684547, 0.448384, 0.175024, -0.112855, -0.391372, -0.637423, -0.830595, -0.954864, -0.999921, -0.962028, -0.844330, -0.656588, -0.414379, -0.137794, 0.150222, 0.425775, 0.666008, 0.850992, 0.965380, 0.999684, 0.951058, 0.823535, 0.627696, 0.379784, 0.100368, -0.187375, -0.459574, -0.693649, -0.870180, -0.974525, -0.998027, -0.938736, -0.801572, -0.597912, -0.344651, -0.062799, 0.224262, 0.492719, 0.720302, 0.888132, 0.982285, 0.994952, 0.925081, 0.778469, 0.567278, 0.309028, 0.025142, -0.260830, -0.525164, -0.745933, -0.904822, -0.988650, -0.990463, -0.910112, -0.754260, -0.535839, -0.272966, 0.012551, 0.297027, 0.556863, 0.770503, 0.920226, 0.993609, 0.984567, 0.893849, 0.728980, 0.503638, 0.236516, -0.050227, -0.332803,
//4.9
0.000000, 0.303035, 0.577573, 0.797794, 0.942991, 0.999507, 0.962028, 0.834079, 0.627692, 0.362276, 0.062791, -0.242599, -0.525174, -0.758362, -0.920232, -0.995562, -0.977268, -0.867071, -0.675333, -0.420085, -0.125333, 0.181207, 0.470705, 0.715937, 0.893842, 0.987689, 0.988652, 0.896641, 0.720309, 0.476238, 0.187382, -0.119097, -0.414375, -0.670685, -0.863923, -0.975916, -0.996134, -0.922674, -0.762444, -0.530514, -0.248693, 0.056515, 0.356408, 0.622785, 0.830594, 0.960292, 0.999684, 0.945065, 0.801570, 0.582695, 0.309023, 0.006289, -0.297036, -0.572427, -0.793987, -0.940879, -0.999289, -0.963726, -0.837532, -0.632576, -0.368132, -0.069068, 0.236491, 0.519810, 0.754245, 0.917751, 0.994950, 0.978583, 0.870189, 0.679961, 0.425789, 0.131575, -0.175012, -0.465141, -0.711527, -0.891001, -0.986684, -0.989578, -0.899411, -0.724662, -0.481766, -0.193563, 0.112842, 0.408636, 0.666001, 0.860734, 0.974523, 0.996667, 0.925083, 0.766503, 0.535841, 0.254787, -0.050227, -0.350518, -0.617846, -0.827071, -0.958517, -0.999823, -0.947104, -0.805319,
//5.2
0.000000, 0.320944, 0.607930, 0.830596, 0.965382, 0.998027, 0.925077, 0.754251, 0.503623, 0.199710, -0.125333, -0.437115, -0.702650, -0.893841, -0.990461, -0.982287, -0.870184, -0.666012, -0.391373, -0.075326, 0.248691, 0.546395, 0.786289, 0.942991, 0.999921, 0.951056, 0.801566, 0.567268, 0.272952, -0.050244, -0.368124, -0.647056, -0.857526, -0.977268, -0.993611, -0.904828, -0.720311, -0.459582, -0.150228, 0.175020, 0.481751, 0.737511, 0.915240, 0.996133, 0.971633, 0.844331, 0.627695, 0.344648, 0.025136, -0.297036, -0.587780, -0.816336, -0.958520, -0.999290, -0.934331, -0.770518, -0.525181, -0.224278, 0.100354, 0.414368, 0.684541, 0.882287, 0.986685, 0.986687, 0.882296, 0.684554, 0.414385, 0.100372, -0.224260, -0.525165, -0.770506, -0.934325, -0.999289, -0.958525, -0.816347, -0.587796, -0.297054, 0.025117, 0.344630, 0.627680, 0.844320, 0.971628, 0.996135, 0.915247, 0.737524, 0.481768, 0.175039, -0.150209, -0.459565, -0.720297, -0.904820, -0.993609, -0.977272, -0.857536, -0.647070, -0.368142, -0.050264, 0.272933, 0.567253, 0.801555,
//5.6
0.000000, 0.344643, 0.647056, 0.870184, 0.986686, 0.982287, 0.857527, 0.627692, 0.320944, -0.025130, -0.368124, -0.666012, -0.882291, -0.990461, -0.977268, -0.844328, -0.607930, -0.297041, 0.050245, 0.391374, 0.684548, 0.893842, 0.993611, 0.971631, 0.830595, 0.587784, 0.272951, -0.075327, -0.414376, -0.702650, -0.904827, -0.996134, -0.965382, -0.816340, -0.567270, -0.248692, 0.100359, 0.437113, 0.720307, 0.915240, 0.998026, 0.958523, 0.801570, 0.546398, 0.224276, -0.125328, -0.459575, -0.737509, -0.925075, -0.999289, -0.951059, -0.786292, -0.525180, -0.199717, 0.150219, 0.481747, 0.754246, 0.934326, 0.999921, 0.942993, 0.770519, 0.503631, 0.175033, -0.175013, -0.503614, -0.770506, -0.942987, -0.999921, -0.934333, -0.754259, -0.481764, -0.150238, 0.199697, 0.525163, 0.786280, 0.951052, 0.999290, 0.925083, 0.737523, 0.459593, 0.125349, -0.224255, -0.546381, -0.801557, -0.958517, -0.998028, -0.915248, -0.720321, -0.437132, -0.100380, 0.248672, 0.567253, 0.816328, 0.965376, 0.996135, 0.904836, 0.702665, 0.414395, 0.075348, -0.272931,
//5.85
0.000000, 0.359345, 0.670686, 0.892428, 0.994951, 0.964557, 0.805308, 0.538477, 0.199710, -0.165736, -0.509041, -0.784343, -0.954864, -0.997825, -0.907485, -0.695913, -0.391374, -0.034550, 0.326888, 0.644658, 0.876307, 0.990890, 0.973098, 0.825310, 0.567268, 0.233444, -0.131565, -0.478999, -0.762443, -0.944031, -0.999507, -0.921457, -0.720310, -0.422936, -0.069062, 0.294038, 0.617858, 0.859137, 0.985644, 0.980478, 0.844330, 0.595387, 0.266906, -0.097231, -0.448379, -0.739627, -0.932069, -0.999995, -0.934331, -0.743850, -0.453997, -0.103493, 0.260835, 0.590318, 0.840941, 0.979221, 0.986687, 0.862341, 0.622795, 0.300049, -0.062781, -0.417224, -0.715929, -0.918994, -0.999289, -0.946089, -0.766500, -0.484515, -0.137802, 0.227319, 0.562073, 0.821739, 0.971629, 0.991718, 0.879323, 0.649459, 0.332834, -0.028255, -0.385570, -0.691375, -0.904820, -0.997389, -0.956717, -0.788236, -0.514455, -0.171947, 0.193531, 0.533156, 0.801556, 0.962875, 0.995564, 0.895255, 0.675348, 0.365221, 0.006304, -0.353455, -0.665996, -0.889566, -0.994298, -0.966202,
//6.2
0.000000, 0.379779, 0.702650, 0.920232, 0.999921, 0.929776, 0.720309, 0.402907, 0.025130, -0.356412, -0.684547, -0.910106, -0.999289, -0.938734, -0.737513, -0.425779, -0.050244, 0.332820, 0.666012, 0.899406, 0.998027, 0.947098, 0.754250, 0.448382, 0.075325, -0.309018, -0.647057, -0.888137, -0.996134, -0.954865, -0.770513, -0.470705, -0.100363, 0.285018, 0.627690, 0.876306, 0.993611, 0.962028, 0.786290, 0.492730, 0.125337, -0.260837, -0.607927, -0.863921, -0.990461, -0.968585, -0.801571, -0.514445, -0.150232, 0.236492, 0.587779, 0.850991, 0.986685, 0.974529, 0.816344, 0.535834, 0.175032, -0.211998, -0.567261, -0.837523, -0.982285, -0.979857, -0.830602, -0.556885, -0.199721, 0.187370, 0.546384, 0.823525, 0.977265, 0.984567, 0.844335, 0.577584, 0.224285, -0.162623, -0.525162, -0.809008, -0.971628, -0.988654, -0.857535, -0.597919, -0.248707, 0.137773, 0.503608, 0.793979, 0.965377, 0.992117, 0.870193, 0.617875, 0.272971, -0.112836, -0.481735, -0.778449, -0.958516, -0.994953, -0.882302, -0.637441, -0.297064, 0.087828, 0.459559, 0.762427,
//6.6
0.000000, 0.402906, 0.737513, 0.947098, 0.996134, 0.876307, 0.607930, 0.236499, -0.175023, -0.556875, -0.844328, -0.988652, -0.965382, -0.778463, -0.459580, -0.062791, 0.344643, 0.693654, 0.925077, 0.999684, 0.904827, 0.656585, 0.297040, -0.112858, -0.503625, -0.809018, -0.977268, -0.979855, -0.816339, -0.514440, -0.125334, 0.285019, 0.647055, 0.899405, 0.999289, 0.929777, 0.702652, 0.356415, -0.050241, -0.448380, -0.770511, -0.962026, -0.990462, -0.850997, -0.567274, -0.187387, 0.224264, 0.597899, 0.870180, 0.994950, 0.951059, 0.745946, 0.414383, 0.012574, -0.391366, -0.728963, -0.942988, -0.997160, -0.882296, -0.617868, -0.248700, 0.162626, 0.546385, 0.837522, 0.986684, 0.968586, 0.786296, 0.470716, 0.075341, -0.332806, -0.684537, -0.920226, -0.999921, -0.910112, -0.666024, -0.309033, 0.100345, 0.492712, 0.801556, 0.974523, 0.982291, 0.823543, 0.525191, 0.137810, -0.272933, -0.637408, -0.893832, -0.998736, -0.934337, -0.711551, -0.368145, 0.037668, 0.437095, 0.762427, 0.958515, 0.992118, 0.857539, 0.577593, 0.199735, -0.211982,
//6.75
0.000000, 0.411514, 0.750111, 0.955793, 0.992115, 0.852640, 0.562083, 0.171929, -0.248690, -0.625242, -0.891006, -0.998890, -0.929777, -0.695913, -0.338738, 0.078459, 0.481754, 0.799685, 0.975917, 0.979223, 0.809016, 0.495458, 0.094107, -0.323919, -0.684549, -0.923880, -0.999507, -0.898027, -0.637424, -0.263873, 0.156434, 0.549022, 0.844327, 0.990023, 0.960294, 0.760408, 0.425782, 0.015710, -0.397145, -0.739628, -0.951055, -0.993961, -0.860745, -0.575010, -0.187387, 0.233439, 0.612902, 0.883762, 0.998026, 0.935447, 0.707113, 0.353482, -0.062783, -0.467923, -0.790150, -0.972368, -0.982289, -0.818155, -0.509050, -0.109745, 0.309007, 0.673004, 0.917750, 0.999877, 0.904832, 0.649458, 0.279004, -0.140888, -0.535815, -0.835799, -0.987686, -0.964561, -0.770523, -0.439954, -0.031427, 0.382668, 0.728957, 0.946080, 0.995564, 0.868641, 0.587800, 0.202806, -0.218124, -0.600404, -0.876297, -0.996916, -0.940888, -0.718141, -0.368145, 0.047084, 0.453970, 0.780416, 0.968577, 0.985113, 0.827094, 0.522520, 0.125358, -0.294016, -0.661292, -0.911393,
//6.8
0.000000, 0.414376, 0.754251, 0.958522, 0.990461, 0.844328, 0.546394, 0.150226, -0.272952, -0.647056, -0.904827, -0.999921, -0.915241, -0.666012, -0.297042, 0.125333, 0.525175, 0.830596, 0.986686, 0.965381, 0.770513, 0.437115, 0.025129, -0.391375, -0.737514, -0.951057, -0.993611, -0.857526, -0.567269, -0.175023, 0.248689, 0.627691, 0.893841, 0.999289, 0.925078, 0.684549, 0.320946, -0.100359, -0.503620, -0.816337, -0.982286, -0.971633, -0.786292, -0.459585, -0.050250, 0.368119, 0.720304, 0.942988, 0.996134, 0.870188, 0.587792, 0.199717, -0.224263, -0.607924, -0.882287, -0.998026, -0.934332, -0.702657, -0.344653, 0.075316, 0.481744, 0.801560, 0.977266, 0.977271, 0.801575, 0.481765, 0.075340, -0.344630, -0.702640, -0.934324, -0.998028, -0.882298, -0.607943, -0.224286, 0.199694, 0.587772, 0.870175, 0.996132, 0.942997, 0.720322, 0.368142, -0.050225, -0.459562, -0.786276, -0.971627, -0.982291, -0.816352, -0.503642, -0.100384, 0.320922, 0.684530, 0.925068, 0.999290, 0.893852, 0.627710, 0.248714, -0.174998, -0.567248, -0.857513, -0.993608,
//7.1
0.000000, 0.431456, 0.778462, 0.973099, 0.977268, 0.790155, 0.448383, 0.018849, -0.414375, -0.766493, -0.968583, -0.981091, -0.801567, -0.465152, -0.037691, 0.397148, 0.754251, 0.963724, 0.984564, 0.812694, 0.481753, 0.056517, -0.379781, -0.741743, -0.958522, -0.987688, -0.823532, -0.498184, -0.075326, 0.362275, 0.728968, 0.952979, 0.990462, 0.834079, 0.514441, 0.094111, -0.344640, -0.715934, -0.947097, -0.992883, -0.844330, -0.530515, -0.112862, 0.326883, 0.702646, 0.940879, 0.994952, 0.854281, 0.546401, 0.131573, -0.309009, -0.689108, -0.934326, -0.996667, -0.863928, -0.562091, -0.150235, 0.291026, 0.675325, 0.927441, 0.998027, 0.873268, 0.577583, 0.168846, -0.272939, -0.661302, -0.920226, -0.999034, -0.882298, -0.592869, -0.187397, 0.254755, 0.647043, 0.912685, 0.999685, 0.891015, 0.607945, 0.205881, -0.236481, -0.632555, -0.904819, -0.999980, -0.899414, -0.622804, -0.224292, 0.218122, 0.617842, 0.896631, 0.999921, 0.907494, 0.637442, 0.242623, -0.199686, -0.602910, -0.888125, -0.999506, -0.915252, -0.651854, -0.260868, 0.181179,
//7.19
0.000000, 0.436551, 0.785511, 0.976867, 0.972223, 0.772512, 0.417804, -0.020733, -0.455110, -0.798173, -0.981090, -0.967162, -0.759181, -0.398878, 0.041457, 0.473473, 0.810492, 0.984893, 0.961684, 0.745522, 0.379778, -0.062165, -0.491635, -0.822463, -0.988271, -0.955793, -0.731543, -0.360517, 0.082843, 0.509582, 0.834078, 0.991225, 0.949492, 0.717252, 0.341104, -0.103484, -0.527309, -0.845335, -0.993752, -0.942783, -0.702653, -0.321543, 0.124081, 0.544810, 0.856228, 0.995852, 0.935668, 0.687752, 0.301845, -0.144624, -0.562076, -0.866754, -0.997524, -0.928152, -0.672554, -0.282016, 0.165107, 0.579102, 0.876906, 0.998768, 0.920236, 0.657069, 0.262066, -0.185517, -0.595878, -0.886682, -0.999582, -0.911926, -0.641300, -0.242005, 0.205847, 0.612398, 0.896077, 0.999967, 0.903223, 0.625257, 0.221839, -0.226089, -0.628654, -0.905086, -0.999921, -0.894132, -0.608944, -0.201577, 0.246234, 0.644641, 0.913707, 0.999446, 0.884657, 0.592370, 0.181230, -0.266273, -0.660350, -0.921934, -0.998542, -0.874802, -0.575541, -0.160804, 0.286197, 0.675775,
//7.4
0.000000, 0.448383, 0.801567, 0.984564, 0.958522, 0.728969, 0.344643, -0.112856, -0.546394, -0.863923, -0.998027, -0.920232, -0.647056, -0.236500, 0.224270, 0.637424, 0.915241, 0.998737, 0.870183, 0.556875, 0.125332, -0.332821, -0.720310, -0.954865, -0.986686, -0.809016, -0.459579, -0.012565, 0.437116, 0.793990, 0.982287, 0.962028, 0.737514, 0.356414, -0.100360, -0.535825, -0.857525, -0.997159, -0.925079, -0.656589, -0.248694, 0.212002, 0.627687, 0.910103, 0.999290, 0.876310, 0.567275, 0.137798, -0.320936, -0.711530, -0.951054, -0.988653, -0.816344, -0.470712, -0.025139, 0.425770, 0.786282, 0.979853, 0.965385, 0.745949, 0.368136, -0.087839, -0.525164, -0.850987, -0.996132, -0.929782, -0.666023, -0.260856, 0.199695, 0.617847, 0.904820, 0.999685, 0.882299, 0.577587, 0.150243, -0.308999, -0.702637, -0.947092, -0.990464, -0.823544, -0.481772, -0.037711, 0.414356, 0.778449, 0.977263, 0.968589, 0.754267, 0.379801, -0.075303, -0.514419, -0.844315, -0.994948, -0.934338, -0.675352, -0.272978, 0.187355, 0.607908, 0.899393, 0.999921, 0.888150,
//7.79
0.000000, 0.470149, 0.829895, 0.994760, 0.926029, 0.639842, 0.203403, -0.280800, -0.699064, -0.953169, -0.983445, -0.782782, -0.398302, 0.079711, 0.539006, 0.871727, 0.999744, 0.892995, 0.576546, 0.124709, -0.356413, -0.753840, -0.974245, -0.965871, -0.730685, -0.323916, 0.158918, 0.604433, 0.908012, 0.998366, 0.854278, 0.509583, 0.045225, -0.429753, -0.803814, -0.989118, -0.942152, -0.673944, -0.247477, 0.237105, 0.666008, 0.938515, 0.990635, 0.810127, 0.439381, -0.034543, -0.500356, -0.848672, -0.997698, -0.912438, -0.612915, -0.169461, 0.313785, 0.723346, 0.963047, 0.976600, 0.760821, 0.366382, -0.114093, -0.567776, -0.888131, -0.999929, -0.876918, -0.547984, -0.090369, 0.388467, 0.776081, 0.981451, 0.956350, 0.706674, 0.291053, -0.192916, -0.631582, -0.921937, -0.995797, -0.835818, -0.479567, -0.010702, 0.460677, 0.823877, 0.993609, 0.930016, 0.648031, 0.213871, -0.270511, -0.691370, -0.949877, -0.985329, -0.789400, -0.408099, 0.069034, 0.529956, 0.866430, 0.999445, 0.897763, 0.585264, 0.135329, -0.346384, -0.746758, -0.971773,
//8.2
0.000000, 0.492727, 0.857527, 0.999684, 0.882291, 0.535827, 0.050244, -0.448383, -0.830596, -0.997159, -0.904827, -0.577573, -0.100362, 0.402906, 0.801567, 0.992115, 0.925077, 0.617859, 0.150225, -0.356413, -0.770514, -0.984565, -0.942990, -0.656584, -0.199708, 0.309019, 0.737514, 0.974527, 0.958522, 0.693653, 0.248690, -0.260841, -0.702649, -0.962027, -0.971632, -0.728971, -0.297045, 0.212003, 0.666009, 0.947097, 0.982288, 0.762446, 0.344649, -0.162631, -0.627686, -0.929774, -0.990463, -0.793996, -0.391382, 0.112847, 0.587777, 0.910102, 0.996134, 0.823538, 0.437125, -0.062780, -0.546385, -0.888131, -0.999290, -0.851001, -0.481765, 0.012552, 0.503611, 0.863916, 0.999921, 0.876314, 0.525188, 0.037707, -0.459565, -0.837518, -0.998026, -0.899413, -0.567285, -0.087871, 0.414357, 0.809005, 0.993609, 0.920240, 0.607948, 0.137812, -0.368103, -0.778448, -0.986682, -0.938742, -0.647075, -0.187406, 0.320919, 0.745924, 0.977262, 0.954873, 0.684567, 0.236526, -0.272924, -0.711515, -0.965374, -0.968591, -0.720330, -0.285049, 0.224240, 0.675309,
//8.6
0.000000, 0.514440, 0.882291, 0.998737, 0.830596, 0.425779, -0.100362, -0.597905, -0.925077, -0.988652, -0.770514, -0.332820, 0.199709, 0.675332, 0.958522, 0.968583, 0.702650, 0.236499, -0.297042, -0.745942, -0.982287, -0.938733, -0.627690, -0.137788, 0.391376, 0.809018, 0.996134, 0.899405, 0.546394, 0.037690, -0.481753, -0.863923, -0.999921, -0.850996, -0.459582, 0.062788, 0.567266, 0.910104, 0.993612, 0.793993, 0.368130, -0.162631, -0.647051, -0.947096, -0.977270, -0.728974, -0.272960, 0.260833, 0.720302, 0.974525, 0.951060, 0.656593, 0.175033, -0.356402, -0.786282, -0.992113, -0.915246, -0.577583, -0.075340, 0.448371, 0.844320, 0.999684, 0.870191, 0.492741, -0.025114, -0.535813, -0.893834, -0.997160, -0.816350, -0.402923, 0.125314, 0.617844, 0.934322, 0.984568, 0.754265, 0.309037, -0.224249, -0.693637, -0.965376, -0.962034, -0.684565, -0.212031, 0.320920, 0.762426, 0.986682, 0.929786, 0.607952, 0.112884, -0.414350, -0.823516, -0.998025, -0.888150, -0.525200, -0.012596, 0.503596, 0.876292, 0.999291, 0.837546, 0.437145, -0.087818,
//8.9
0.000000, 0.530511, 0.899405, 0.994301, 0.786288, 0.338738, -0.212007, -0.698165, -0.971632, -0.949096, -0.637424, -0.131565, 0.414375, 0.834078, 0.999684, 0.860742, 0.459580, -0.081591, -0.597906, -0.932071, -0.982287, -0.733254, -0.260840, 0.291038, 0.754253, 0.987689, 0.920231, 0.572431, 0.050244, -0.487250, -0.876306, -0.998402, -0.816340, -0.385586, 0.162635, 0.661310, 0.958521, 0.963725, 0.675336, 0.181211, -0.368119, -0.805304, -0.997158, -0.885235, -0.503630, 0.031402, 0.556868, 0.912688, 0.990463, 0.766500, 0.309027, -0.242590, -0.720302, -0.978579, -0.938738, -0.612916, -0.100374, 0.442747, 0.850987, 0.999980, 0.844336, 0.431470, -0.112841, -0.622775, -0.942985, -0.975920, -0.711548, -0.230407, 0.320926, 0.774491, 0.992112, 0.907493, 0.546412, 0.018870, -0.514421, -0.890996, -0.996136, -0.797808, -0.356434, 0.193526, 0.684529, 0.966995, 0.954872, 0.651854, 0.150252, -0.397123, -0.823517, -0.999032, -0.870198, -0.476264, 0.062761, 0.582666, 0.925065, 0.985650, 0.745962, 0.279022, -0.272920, -0.741719, -0.984558, -0.927458,
//9.2
0.000000, 0.546394, 0.915241, 0.986686, 0.737513, 0.248690, -0.320943, -0.786288, -0.996134, -0.882291, -0.481754, 0.075326, 0.607930, 0.942990, 0.971632, 0.684547, 0.175023, -0.391374, -0.830596, -0.999921, -0.844327, -0.414374, 0.150228, 0.666014, 0.965382, 0.951056, 0.627690, 0.100361, -0.459580, -0.870184, -0.998027, -0.801568, -0.344644, 0.224269, 0.720307, 0.982287, 0.925079, 0.567272, 0.025135, -0.525170, -0.904825, -0.990462, -0.754256, -0.272959, 0.297034, 0.770508, 0.993610, 0.893846, 0.503632, -0.050234, -0.587776, -0.934325, -0.977270, -0.702658, -0.199721, 0.368113, 0.816332, 0.999289, 0.857534, 0.437129, -0.125318, -0.647044, -0.958517, -0.958526, -0.647069, -0.125351, 0.437099, 0.857517, 0.999290, 0.816351, 0.368143, -0.199690, -0.702635, -0.977264, -0.934337, -0.587804, -0.050268, 0.503603, 0.893830, 0.993614, 0.770530, 0.297067, -0.272926, -0.754234, -0.990458, -0.904839, -0.525199, 0.025101, 0.567244, 0.925066, 0.982293, 0.720331, 0.224302, -0.344612, -0.801547, -0.998025, -0.870201, -0.459611, 0.100327, 0.627664,
//9.3
0.000000, 0.551646, 0.920232, 0.983445, 0.720309, 0.218143, -0.356412, -0.812694, -0.999289, -0.854278, -0.425780, 0.144010, 0.666011, 0.967001, 0.947098, 0.612907, 0.075327, -0.487250, -0.888137, -0.994301, -0.770512, -0.291035, 0.285021, 0.766495, 0.993612, 0.891006, 0.492726, -0.069061, -0.607931, -0.945063, -0.968583, -0.670686, -0.150227, 0.420084, 0.850993, 0.999507, 0.816341, 0.362279, -0.212002, -0.715933, -0.982286, -0.922675, -0.556881, -0.006291, 0.546388, 0.917751, 0.984566, 0.724660, 0.224281, -0.350524, -0.809010, -0.999032, -0.857532, -0.431466, 0.137779, 0.661303, 0.965378, 0.949100, 0.617871, 0.081605, -0.481740, -0.885224, -0.994953, -0.774514, -0.297058, 0.278974, 0.762431, 0.992880, 0.893850, 0.498202, -0.062770, -0.602913, -0.942983, -0.970132, -0.675349, -0.156457, 0.414354, 0.847665, 0.999685, 0.819967, 0.368149, -0.205837, -0.711517, -0.981085, -0.925088, -0.562107, -0.012595, 0.541096, 0.915229, 0.985650, 0.728990, 0.230420, -0.344613, -0.805288, -0.998735, -0.860759, -0.437147, 0.131530, 0.656559, 0.963714,
//9.6
0.000000, 0.567269, 0.934329, 0.971632, 0.666012, 0.125333, -0.459580, -0.882291, -0.993611, -0.754252, -0.248691, 0.344642, 0.816339, 0.999921, 0.830596, 0.368125, -0.224271, -0.737513, -0.990462, -0.893841, -0.481752, 0.100363, 0.647058, 0.965382, 0.942990, 0.587783, 0.025128, -0.546395, -0.925077, -0.977268, -0.684548, -0.150227, 0.437114, 0.870183, 0.996134, 0.770515, 0.272956, -0.320939, -0.801564, -0.999289, -0.844331, -0.391380, 0.199703, 0.720304, 0.986685, 0.904831, 0.503631, -0.075317, -0.627683, -0.958519, -0.951060, -0.607939, -0.050255, 0.525165, 0.915236, 0.982290, 0.702659, 0.175037, -0.414362, -0.857519, -0.998028, -0.786298, -0.297057, 0.297025, 0.786277, 0.998026, 0.857536, 0.414393, -0.175003, -0.702635, -0.982283, -0.915250, -0.525194, 0.050222, 0.607912, 0.951049, 0.958529, 0.627711, 0.075352, -0.503601, -0.904816, -0.986690, -0.720328, -0.199738, 0.391347, 0.844312, 0.999291, 0.801585, 0.320973, -0.272921, -0.770493, -0.996131, -0.870200, -0.437146, 0.150191, 0.684522, 0.977261, 0.925091, 0.546425, -0.025093,
//9.9
0.000000, 0.582690, 0.947098, 0.956712, 0.607930, 0.031411, -0.556875, -0.936550, -0.965382, -0.632571, -0.062791, 0.530511, 0.925077, 0.973099, 0.656586, 0.094109, -0.503623, -0.912692, -0.979855, -0.679953, -0.125332, 0.476240, 0.899406, 0.985644, 0.702648, 0.156432, -0.448385, -0.885232, -0.990461, -0.724653, -0.187382, 0.420085, 0.870183, 0.994301, 0.745943, 0.218147, -0.391370, -0.854275, -0.997159, -0.766497, -0.248696, 0.362269, 0.837524, 0.999033, 0.786294, 0.279000, -0.332810, -0.819946, -0.999921, -0.805315, -0.309029, 0.303025, 0.801560, 0.999822, 0.823540, 0.338750, -0.272939, -0.782382, -0.998736, -0.840953, -0.368139, 0.242583, 0.762431, 0.996664, 0.857536, 0.397165, -0.211988, -0.741728, -0.993609, -0.873273, -0.425799, 0.181184, 0.720293, 0.989573, 0.888148, 0.454012, -0.150201, -0.698147, -0.984560, -0.902146, -0.481778, 0.119069, 0.675312, 0.978575, 0.915253, 0.509068, -0.087820, -0.651810, -0.971624, -0.927457, -0.535855, 0.056485, 0.627665, 0.963714, 0.938746, 0.562113, -0.025093, -0.602900, -0.954853, -0.949108,
//10.2
0.000000, 0.597905, 0.958522, 0.938734, 0.546394, -0.062790, -0.647056, -0.974527, -0.915241, -0.492728, 0.125333, 0.693653, 0.986686, 0.888137, 0.437116, -0.187381, -0.737513, -0.994951, -0.857526, -0.379778, 0.248691, 0.778463, 0.999290, 0.823531, 0.320941, -0.309019, -0.816340, -0.999684, -0.786288, -0.260842, 0.368124, 0.850994, 0.996134, 0.745943, 0.199713, -0.425776, -0.882289, -0.988652, -0.702654, -0.137796, 0.481748, 0.910103, 0.977270, 0.656592, 0.075336, -0.535819, -0.934325, -0.962031, -0.607939, -0.012578, 0.587775, 0.954861, 0.942994, 0.556886, -0.050231, -0.637414, -0.971628, -0.920238, -0.503636, 0.112841, 0.684535, 0.984561, 0.893849, 0.448400, -0.175004, -0.728955, -0.993609, -0.863934, -0.391393, 0.236478, 0.770499, 0.998736, 0.830609, 0.332842, -0.297018, -0.809002, -0.999921, -0.794007, -0.272978, 0.356386, 0.844313, 0.997161, 0.754271, 0.212037, -0.414348, -0.876292, -0.990466, -0.711559, -0.150258, 0.470674, 0.904812, 0.979862, 0.666038, 0.087887, -0.525143, -0.929763, -0.965392, -0.617890, -0.025169, 0.577540,
//10.6
0.000000, 0.617860, 0.971632, 0.910106, 0.459580, -0.187381, -0.754251, -0.998737, -0.816339, -0.285020, 0.368124, 0.863923, 0.990462, 0.693654, 0.100362, -0.535827, -0.942991, -0.947098, -0.546394, 0.087852, 0.684548, 0.988652, 0.870183, 0.379777, -0.272955, -0.809018, -0.999289, -0.762442, -0.199709, 0.448383, 0.904827, 0.974527, 0.627693, 0.012569, -0.607928, -0.968582, -0.915243, -0.470708, 0.175018, 0.745937, 0.998026, 0.823537, 0.297049, -0.356404, -0.857522, -0.992116, -0.702657, -0.112867, 0.525165, 0.938730, 0.951061, 0.556885, -0.075315, -0.675323, -0.986684, -0.876313, -0.391387, 0.260827, 0.801557, 0.999685, 0.770524, 0.212024, -0.437099, -0.899397, -0.977272, -0.637440, -0.025151, 0.597888, 0.965376, 0.920241, 0.481774, -0.162614, -0.737497, -0.997157, -0.830610, -0.309042, 0.344618, 0.850980, 0.993614, 0.711556, 0.125362, -0.514414, -0.934318, -0.954874, -0.567295, 0.062758, 0.665987, 0.984558, 0.882307, 0.402938, -0.248655, -0.793968, -0.999922, -0.778486, -0.224308, 0.425744, 0.893824, 0.979863, 0.647087, 0.037731
};


// Valores desejados dos padrões ao final do treinamento.
float dv[32][c2] =
{
/*
1.0,	0.0,    0.0,	0.0,	0.0,    0.0,	0.0,    0.0,	0.0,	0.0,
0.0,	1.0,	0.0,	0.0,	0.0,    0.0,	0.0,    0.0,	0.0,	0.0,
0.0,	0.0,	1.0,	0.0,	0.0,    0.0,	0.0,    0.0,	0.0,	0.0,
0.0,	0.0,	0.0,	1.0,	0.0,    0.0,	0.0,    0.0,	0.0,	0.0,
0.0,	0.0,	0.0,	0.0,	1.0,    0.0,	0.0,    0.0,	0.0,	0.0,
0.0,	0.0,	0.0,	0.0,	0.0,    1.0,	0.0,    0.0,	0.0,	0.0,
0.0,	0.0,	0.0,	0.0,	0.0,    0.0,	1.0,    0.0,	0.0,	0.0,
0.0,	0.0,	0.0,	0.0,	0.0,    0.0,	0.0,    1.0,	0.0,	0.0,
0.0,	0.0,	0.0,	0.0,	0.0,    0.0,	0.0,    0.0,	1.0,	0.0,
0.0,	0.0,	0.0,	0.0,	0.0,    0.0,	0.0,    0.0,	0.0,	1.0
*/

0.0,	0.0,    0.0,	0.0,	1.0,
0.0,	0.0,    0.0,	0.0,	1.0,
0.0,	0.0,	0.0,	1.0,	0.0,
0.0,	0.0,    0.0,	1.0,	0.0,
0.0,	0.0,	0.0,	1.0,	0.0,
0.0,	0.0,    0.0,	1.0,	1.0,
0.0,	0.0,	0.0,	1.0,	1.0,
0.0,	0.0,    0.0,	1.0,	1.0,
0.0,	0.0,	1.0,	0.0,	0.0,
0.0,	0.0,    1.0,	0.0,	0.0,

0.0,	0.0,    1.0,	0.0,	0.0,
0.0,	0.0,    1.0,	0.0,	0.0,
0.0,	0.0,	1.0,	0.0,	1.0,
0.0,	0.0,    1.0,	0.0,	1.0,
0.0,	0.0,	1.0,	0.0,	1.0,
0.0,	0.0,    1.0,	1.0,	0.0,
0.0,	0.0,	1.0,	1.0,	0.0,
0.0,	0.0,    1.0,	1.0,	0.0,
0.0,	0.0,	1.0,	1.0,	0.0,
0.0,	0.0,    1.0,	1.0,	1.0,

0.0,	0.0,    1.0,	1.0,	1.0,
0.0,	0.0,    1.0,	1.0,	1.0,
0.0,	0.0,	1.0,	1.0,	1.0,
0.0,	1.0,    0.0,	0.0,	0.0,
0.0,	1.0,	0.0,	0.0,	0.0,
0.0,	1.0,    0.0,	0.0,	0.0,
0.0,	1.0,	0.0,	0.0,	1.0,
0.0,	1.0,    0.0,	0.0,	1.0,
0.0,	1.0,	0.0,	0.0,	1.0,
0.0,	1.0,    0.0,	0.0,	1.0,
0.0,	1.0,    0.0,	1.0,	0.0,
0.0,	1.0,    0.0,	1.0,	0.0
};


//---------------------------------------------------------------------------


	//Método de abertura dos arquivos de eventos.
void TFmRna::lerArquivos(AnsiString ArquivoDeEventos)
{

	// fOpen arquivo de padrões

  //Declaração do Ponteiro do Arquivo de Eventos.
  FILE *PtArquivoDeEventos;
  const char *recebe_string;

  //Declaração da variável de status de abertura do arquivo.
  bool status = false;

  //Verifica se o arquivo existe antes de abrir.
  if (FileExists(ArquivoDeEventos))
  {
    //Abertura do Arquivo de Padrões.
    if ((PtArquivoDeEventos = fopen(ArquivoDeEventos.c_str(),"r")) != NULL)
    {
      //Extrai apenas o Nome do Arquivo de Evento.
      NomeDoArquivo = ExtractFileName(ArquivoDeEventos);

      //Número de Amostras do Evento.
      fscanf(PtArquivoDeEventos, "%d\n", &NumeroDeAmostras);

      //Duração do Evento.
      fscanf(PtArquivoDeEventos, "%d\n", &Duracao);

      //Tipo do Evento.
      fscanf(PtArquivoDeEventos, "%c\n\n", &Tipo);

      //Redimensiona o vetor de amostras do evento.
      Amostras.resize(NumeroDeAmostras);

      //Recebe as amostras do evento do arquivo.
      for (int a = 0; a < (int) NumeroDeAmostras; a++)
      {
        fscanf(PtArquivoDeEventos, "%lf\n", &Amostras[a]);
      }

      //Fecha o Ponteiro do Arquivo de Padrões.
      fclose(PtArquivoDeEventos);

      //Sinaliza se o arquivo foi aberto corretamente.
      status = true;
    }
    else
    {
      status = false;
      recebe_string = ExtractFileName(ArquivoDeEventos).c_str();
      Application->MessageBox(recebe_string, "Erro ao abrir o arquivo de Eventos", MB_OK);
    }
  }
  else
  {
    status = false;
    recebe_string = ExtractFileName(ArquivoDeEventos).c_str();
    Application->MessageBox(recebe_string, "Erro ao abrir o arquivo de Eventos", MB_OK);
  }

  return (status);
}
//---------------------------------------------------------------------------


}






//---------------------------------------------------------------------------
__fastcall TFmRna::TFmRna(TComponent* Owner)
	: TForm(Owner)
{

}

//---------------------------------------------------------------------------

void __fastcall TFmRna::FormCreate(TObject *Sender)
{
	// Redimensiona o valor máximo do eixo x com o tamanho da tela desejada.
	Chart2->BottomAxis->Maximum = 99;

	// Expande o gráfico para comportar a quantidade de amostras contidas em max_tela.
	for (unsigned int a = 0; a < 100; a++)
	{
		Chart2->Series[0]->AddY(0);
	}

	// Atualiza o chart.
	Chart2->Refresh();

}
//---------------------------------------------------------------------------


void __fastcall TFmRna::Button1Click(TObject *Sender)
{
	// Limpa as séries do chart para nova plotagem.
	Chart1->Series[0]->Clear();
	Chart1->Series[1]->Clear();

	// Instanciação Declaração da Thread
	MyThread = new Thread(true); 		// cria a thread suspensa, sem executar ainda.
	// MyThread->FreeOnTerminate = True;   // destroi a thread automaticamente depois qu efinalizou.
	MyThread->Priority = tpNormal;  		// configura com prioridade mais baixa que a normal.
	MyThread->Resume();					// faz com que a thread seja executada.
}

//---------------------------------------------------------------------------

void __fastcall TFmRna::Button2Click(TObject *Sender)
{
	// Verificação da instância da thread de atualização do gráfico.
	if (MyThread != NULL)
	{
		MyThread->Terminate();
		Sleep(500);

		delete MyThread;    // se usar (MyThread->FreeOnTerminate = True;) não precisa deletar.
		MyThread = NULL;

		FmRna->Memo1->Lines->Add("finalizou a thread e deletou a instância.");
	}
}

//---------------------------------------------------------------------------

// Declaração da thread de processamento

__fastcall Thread::Thread(bool CreateSuspended)
				: TThread(CreateSuspended)
{
	FmRna->Memo1->Lines->Add("iniciou a thread...");
}

//---------------------------------------------------------------------------

void __fastcall Thread::Execute()
{

    /* initialize random weights: */
    srand (time(NULL));

	padroes = 10;                   // Número de padrões a treinar.
	funcao = 0;                 	// Função Logística(0).
	taxa_aprendizado = 0.001;    	// Taxa de Aprendizado.
	precisao_da_randomizacao = 0.01; // Precisão da randomização (0.1, 0.01, 0.001)
	ERRO = 0.0001;              	// Erro mínimo aceitável da rede (se aplicável).
	MOMENTUM = 0.9;             	// Termo de momentum.
	epocas = 2000;            		// Número máximo de épocas de treinamento.
	rnd = 0;                    	// Variável auxiliar para a randomização dos pesos.
	soma = 0;                   	// Variável auxiliar para a soma das sinapses.
	erro_medio_quadratico = 0;  	// Variável auxiliar do Erro médio quadrático.
	erro_quadratico = 0;        	// Variável auxiliar do erro quadrático.
	fim = 0;                    	// Variável de controle do final do treinamento.
	contador = 0;               	// Variável de controle do número de épocas.
	curva = 0.3;


	padroes_validacao = 32; 		// Número de padrões a validar.
	erro_medio_quadratico_validacao = 0;  	// Variável auxiliar do Erro médio quadrático ded validação.
	erro_quadratico_validacao = 0;  // Variável auxiliar do erro quadrático de validação.



	// Zera o vetor de pesos da camada de entrada da rede e da camada 1.
	for (j = 0; j < (cx * c1); j++)
	{
		w1[j] = 0.0;
	}

	// Zera o vetor de pesos da camada 1 e da camada 2.
	for (j = 0; j < (c1 * c2); j++)
	{
        w2[j] = 0.0;
	}

	// Zera os vetores envolvidos aos neurônios da camada 1.
    for (j = 0; j < c1; j++)
    {
        entrada_camada1[j] = 0.0;
        saida_camada1[j] = 0.0;
        erro_camada1[j] = 0.0;
    }

	// Zera os vetores envolvidos aos neurônios da camada 2.
    for (j = 0; j < c2; j++)
    {
        entrada_camada2[j] = 0.0;
        saida_camada2[j] = 0.0;
        erro_camada2[j] = 0.0;
    }

    // Randomização dos pesos para a camada 1.
    for (j = 0; j < (cx*c1); j++)
	{
		// 10000 = pesos 0.001, 1000 = pesos 0.01, 100 = pesos 0.1
		w1[j] = ((float)(random(200) - 100) * precisao_da_randomizacao) / 10;
	}

	// Randomização dos pesos para a camada 2.
	for (j = 0; j < (c1*c2); j++)
	{
		w2[j] = ((float)(random(200) - 100) * precisao_da_randomizacao) / 10;
	}



//-----------------------------------------------------------------------------//
//                 Gravação dos Pesos antes do treinamento                     //
//-----------------------------------------------------------------------------//



    // Declaração do arquivo que armazena os pesos iniciais da rede.
    FILE *fp;
	fp = fopen("pesos_rand.txt","wt");

	// Grava os pesos da camada 1.
	fprintf(fp,"Pesos Camada 1\n");
    for (j = 0; j < (cx * c1); j++)
    {
        fprintf(fp,"%f\n",w1[j]);
    }

    // Grava os pesos da camada 2.
	fprintf(fp,"Pesos Camada 2\n\n");
    for (j = 0; j < (c1 * c2); j++)
    {
        fprintf(fp,"%f\n",w2[j]);
    }

    // Fecha o ponteiro do arquivo.
    fclose(fp);


	// Declaração do arquivo que armazena os error de treinamento.
	fp = fopen("treinamento.txt","wt");

	// Grava os padrões de entrada utilizados no treinamento.
	fprintf(fp,"Padrões de Entrada Utilizados\n");
	for (i = 0; i < padroes; i++)
	{
		for (j = 0; j < cx; j++)
		{
			fprintf(fp,"%10.2f\t",p[i][j]);
		}
		fprintf(fp,"\n");
	}
	fprintf(fp,"\n");

	// Grava os padrões desejados utilizados no treinamento.
	fprintf(fp,"Padrões Desejados Utilizados\n");
	for (i = 0; i < padroes; i++)
	{
		for (j = 0; j < c2; j++)
		{
			fprintf(fp,"%10.2f\t",d[i][j]);
		}
		fprintf(fp,"\n");
	}
	fprintf(fp,"\n");

	// Informações dos parâmetros utilizados no treinamento.
	fprintf(fp,"Parametros de Configuração da Rede\n");
	fprintf(fp,"Padrões............: %d\n", 	padroes);
	fprintf(fp,"Função utilizada...: %d\n", 	funcao);
	fprintf(fp,"Taxa de Aprendizado: %10.4f\n", taxa_aprendizado);
	fprintf(fp,"Erro mínimo........: %10.4f\n", ERRO);
	fprintf(fp,"Momentum...........: %10.4f\n", MOMENTUM);
	fprintf(fp,"Épocas.............: %d\n\n", 	epocas);
	fprintf(fp,"Épocas de Treinamento - Erro de Propagação\n");


//-----------------------------------------------------------------------------//
//       Inicio do treinamento da rede (propagação dos padrões pela rede)      //
//-----------------------------------------------------------------------------//


	while(contador != epocas && !MyThread->Terminated)
	{
		contador++;

		//FmRna->Memo1->Lines->Add("padrões de treinamento");

		// Propaga os k padrões pela rede.
		for (k = 0; k < padroes; k++)
		{
			//Cálculo para camada C1.
			n = 0;
			for (j = 0; j < c1; j++)
			{
				soma = 0;
				for (i = 0; i < cx; i++)
				{
					soma += w1[n] * p[k][i];
					n += 1;
				}
				entrada_camada1[j] = soma;
				saida_camada1[j] = funcao_ativacao(entrada_camada1[j],funcao,curva);
			}

			//Cálculo para camada C2.
			n = 0;
			for (j = 0; j < c2; j++)
			{
				soma = 0;
				for (i = 0; i < c1; i++)
				{
					soma += w2[n] * saida_camada1[i];
					n += 1;
				}
				entrada_camada2[j] = soma;
				saida_camada2[j] = funcao_ativacao(entrada_camada2[j],funcao,curva);
			}



//-----------------------------------------------------------------------------//
//                      Cálculo do Erro Quadrático                             //
//-----------------------------------------------------------------------------//



			//Calculo do Erro Quadratico.
			erro_quadratico = 0;
			for(j = 0; j < c2; j++)
			{
				erro_quadratico += pow((d[k][j] - saida_camada2[j]),2);
			}

			//Acumula o Erro Quadratico (Criterio de Parada).
			erro_medio_quadratico += (0.5 * erro_quadratico);



//-----------------------------------------------------------------------------//
//                  Retropropagação do Erro Pela Rede                          //
//-----------------------------------------------------------------------------//



			//Calculo do erro para cada neurônio da camada 2.
			for (i = 0; i < c2; i++)
			{
				erro_camada2[i] = (d[k][i] - saida_camada2[i]) * derivada(entrada_camada2[i],funcao,curva);
			}

			//Atualizacao dos pesos para camada 2.
			for (i = 0; i < c1; i++)
			{
				n = 0;
				for (j = 0; j < c2; j++)
				{
					dw2[n + i] = taxa_aprendizado * saida_camada1[i] * erro_camada2[j] + (MOMENTUM * dw2[n + i]);
					w2[n + i] = w2[n + i] + dw2[n + i];
					n += c1;
				}
			}

			//Calculo do erro para cada neurônio da camada 1.
			for (i = 0; i < c1; i++)
			{
				n = 0;
				soma = 0;
				for (j = 0; j < c2; j++)
				{
					soma += (erro_camada2[j] * w2[n + i]);
					n += c1;
				}
				erro_camada1[i] = soma * derivada(entrada_camada1[i],funcao,curva);
			}

			//Atualizacao dos pesos para camada 1.
			for (i = 0; i < cx; i++)
			{
				n = 0;
				for (j = 0; j < c1; j++)
				{
					dw1[n + i] = taxa_aprendizado * p[k][i] * erro_camada1[j] + (MOMENTUM * dw1[n + i]);
					w1[n + i] = w1[n + i] + dw1[n + i];
					n += cx;
				}
			}


			//FmRna->Memo1->Lines->Add(k);


		}


//-----------------------------------------------------------------------------//
//          Cálculo do erro médio quadrático da época de treinamento           //
//-----------------------------------------------------------------------------//


		erro_medio_quadratico = (1.0 / padroes) * erro_medio_quadratico;
		printf("%d\t%10.12f\n", (int) contador, erro_medio_quadratico);
		fprintf(fp,"%d\t%10.12f\n", (int) contador, erro_medio_quadratico);



		// Plotagem dos dados sincronizados com a thread.
		//Synchronize(FmRna->AtualizaGrafico);
		//erro_medio_quadratico = 0;





//-----------------------------------------------------------------------------//
//                      VALIDAÇÃO CRUZADA                                      //
//-----------------------------------------------------------------------------//




		//FmRna->Memo1->Lines->Add("padrões de validação");

		// Propaga os k padrões de validação pela rede.
		for (k = 0; k < padroes_validacao; k++)
		{
			//Cálculo para camada C1.
			n = 0;
			for (j = 0; j < c1; j++)
			{
				soma = 0;
				for (i = 0; i < cx; i++)
				{
					soma += w1[n] * v[k][i];
					n += 1;
				}
				entrada_camada1[j] = soma;
				saida_camada1[j] = funcao_ativacao(entrada_camada1[j],funcao,curva);
			}

			//Cálculo para camada C2.
			n = 0;
			for (j = 0; j < c2; j++)
			{
				soma = 0;
				for (i = 0; i < c1; i++)
				{
					soma += w2[n] * saida_camada1[i];
					n += 1;
				}
				entrada_camada2[j] = soma;
				saida_camada2[j] = funcao_ativacao(entrada_camada2[j],funcao,curva);
			}



	//-----------------------------------------------------------------------------//
	//                      Cálculo do Erro Quadrático de validação                            //
	//-----------------------------------------------------------------------------//



			//Calculo do Erro Quadratico de validação.
			erro_quadratico_validacao = 0;
			for(j = 0; j < c2; j++)
			{
				erro_quadratico_validacao += pow((dv[k][j] - saida_camada2[j]),2);
			}

			//Acumula o Erro Quadratico de validação (Criterio de Parada).
			erro_medio_quadratico_validacao += (0.5 * erro_quadratico_validacao);


			//FmRna->Memo1->Lines->Add(k);

		}


		erro_medio_quadratico_validacao = (1.0 / padroes_validacao) * erro_medio_quadratico_validacao;

		// Plotagem dos dados sincronizados com a thread.
		Synchronize(FmRna->AtualizaGrafico);

		erro_medio_quadratico = 0;
		erro_medio_quadratico_validacao = 0;















	}   // Laço de controle de épocas.

	// Fecha o ponteiro do arquivo de erros de treinamento.
	fclose(fp);


//-----------------------------------------------------------------------------//
//                   Gravação dos Pesos Após treinamento                       //
//-----------------------------------------------------------------------------//


	// Declaração do arquivo que armazena os pesos de treinamento da rede.
	fp = fopen("pesos_treino.txt","wt");

	// Grava os pesos da camada 1.
	fprintf(fp,"\tPesos Camada 1\n");
	for (j = 0; j < (cx * c1); j++)
	{
		fprintf(fp,"\tw1[%d] = %f;\n",j, w1[j]);
	}

	// Grava os pesos da camada 2.
	fprintf(fp,"\n\tPesos Camada 2\n");
	for (j = 0; j < (c1 * c2); j++)
	{
		fprintf(fp,"\tw2[%d] = %f;\n",j, w2[j]);
	}

	// Fecha o ponteiro do arquivo dos pesos de treinamento da rede.
	fclose(fp);

}

//---------------------------------------------------------------------------

void __fastcall TFmRna::AtualizaGrafico()
{
	// Plota as amostras no gráfico.
	//FmRna->Memo1->Lines->Add("Erro treinamento");
	FmRna->Memo1->Lines->Add(FloatToStrF(erro_medio_quadratico,ffFixed,10,6));
	//FmRna->Memo1->Lines->Add("Erro validação");
	//FmRna->Memo1->Lines->Add(FloatToStrF(erro_medio_quadratico_validacao,ffFixed,10,6));

	FmRna->Chart1->Series[0]->AddY(erro_medio_quadratico);
	FmRna->Chart1->Series[1]->AddY(erro_medio_quadratico_validacao);

}

//---------------------------------------------------------------------------


void __fastcall TFmRna::ListBox1Click(TObject *Sender)
{

	for (unsigned int a = 0; a < 100; a++)
	{
		Chart2->Series[0]->YValues->Value[a] = p[ListBox1->ItemIndex][a];
	}

	Chart2->Refresh();



//-----------------------------------------------------------------------------//
//                   Teste da Rede Neural Após treinamento                     //
//-----------------------------------------------------------------------------//


	//Cálculo para camada C1.
	n = 0;
	for (j = 0; j < c1; j++)
	{
		soma = 0;
		for (i = 0; i < cx; i++)
		{
			soma += w1[n] * p[ListBox1->ItemIndex][i];
			n += 1;
		}
		entrada_camada1[j] = soma;
		saida_camada1[j] = funcao_ativacao(entrada_camada1[j],funcao,curva);


		// Formata a saída em binário.
		if (saida_camada1[j] < 0.5)
		{
			saidas_formatadas_c1[j] = 0;
		}else{
			saidas_formatadas_c1[j] = 1;
		}


	}

	//Cálculo para camada C2.
	n = 0;
	for (j = 0; j < c2; j++)
	{
		soma = 0;
		for (i = 0; i < c1; i++)
		{
			soma += w2[n] * saida_camada1[i];
			n += 1;
		}
		entrada_camada2[j] = soma;
		saida_camada2[j] = funcao_ativacao(entrada_camada2[j],funcao,curva);


		// Formata a saída em binário.
		if (saida_camada2[j] < 0.5)
		{
			saidas_formatadas_c2[j] = 0;
		}else{
			saidas_formatadas_c2[j] = 1;
		}

	}


	// Formatação dos neurônios da camada 1
	if (saidas_formatadas_c1[0] > 0.5)
		Shape1->Brush->Color = clRed;
	else
		Shape1->Brush->Color = clWhite;

	if (saidas_formatadas_c1[1] > 0.5)
		Shape2->Brush->Color = clRed;
	else
		Shape2->Brush->Color = clWhite;

	if (saidas_formatadas_c1[2] > 0.5)
		Shape3->Brush->Color = clRed;
	else
		Shape3->Brush->Color = clWhite;

	if (saidas_formatadas_c1[3] > 0.5)
		Shape4->Brush->Color = clRed;
	else
		Shape4->Brush->Color = clWhite;

	if (saidas_formatadas_c1[4] > 0.5)
		Shape5->Brush->Color = clRed;
	else
		Shape5->Brush->Color = clWhite;

	if (saidas_formatadas_c1[5] > 0.5)
		Shape6->Brush->Color = clRed;
	else
		Shape6->Brush->Color = clWhite;

	if (saidas_formatadas_c1[6] > 0.5)
		Shape7->Brush->Color = clRed;
	else
		Shape7->Brush->Color = clWhite;

	if (saidas_formatadas_c1[7] > 0.5)
		Shape8->Brush->Color = clRed;
	else
		Shape8->Brush->Color = clWhite;

	if (saidas_formatadas_c1[8] > 0.5)
		Shape9->Brush->Color = clRed;
	else
		Shape9->Brush->Color = clWhite;

	if (saidas_formatadas_c1[9] > 0.5)
		Shape10->Brush->Color = clRed;
	else
		Shape10->Brush->Color = clWhite;

	if (saidas_formatadas_c1[10] > 0.5)
		Shape11->Brush->Color = clRed;
	else
		Shape11->Brush->Color = clWhite;

	if (saidas_formatadas_c1[11] > 0.5)
		Shape12->Brush->Color = clRed;
	else
		Shape12->Brush->Color = clWhite;

	if (saidas_formatadas_c1[12] > 0.5)
		Shape13->Brush->Color = clRed;
	else
		Shape13->Brush->Color = clWhite;

	if (saidas_formatadas_c1[13] > 0.5)
		Shape14->Brush->Color = clRed;
	else
		Shape14->Brush->Color = clWhite;

	if (saidas_formatadas_c1[14] > 0.5)
		Shape15->Brush->Color = clRed;
	else
		Shape15->Brush->Color = clWhite;


	// Formatação dos neurônios da camada 2
	if (saidas_formatadas_c2[0] > 0.5)
		Shape16->Brush->Color = clRed;
	else
		Shape16->Brush->Color = clWhite;

	if (saidas_formatadas_c2[1] > 0.5)
		Shape17->Brush->Color = clRed;
	else
		Shape17->Brush->Color = clWhite;

	if (saidas_formatadas_c2[2] > 0.5)
		Shape18->Brush->Color = clRed;
	else
		Shape18->Brush->Color = clWhite;

	if (saidas_formatadas_c2[3] > 0.5)
		Shape19->Brush->Color = clRed;
	else
		Shape19->Brush->Color = clWhite;

	if (saidas_formatadas_c2[4] > 0.5)
		Shape20->Brush->Color = clRed;
	else
		Shape20->Brush->Color = clWhite;
}
//---------------------------------------------------------------------------

void __fastcall TFmRna::ListBox2Click(TObject *Sender)
{

	for (unsigned int a = 0; a < 100; a++)
	{
		Chart2->Series[0]->YValues->Value[a] = v[ListBox2->ItemIndex][a];
	}

	Chart2->Refresh();



//-----------------------------------------------------------------------------//
//                   Teste da Rede Neural Após treinamento                     //
//-----------------------------------------------------------------------------//


	//Cálculo para camada C1.
	n = 0;
	for (j = 0; j < c1; j++)
	{
		soma = 0;
		for (i = 0; i < cx; i++)
		{
			soma += w1[n] * v[ListBox2->ItemIndex][i];
			n += 1;
		}
		entrada_camada1[j] = soma;
		saida_camada1[j] = funcao_ativacao(entrada_camada1[j],funcao,curva);


		// Formata a saída em binário.
		if (saida_camada1[j] < 0.5)
		{
			saidas_formatadas_c1[j] = 0;
		}else{
			saidas_formatadas_c1[j] = 1;
		}


	}

	//Cálculo para camada C2.
	n = 0;
	for (j = 0; j < c2; j++)
	{
		soma = 0;
		for (i = 0; i < c1; i++)
		{
			soma += w2[n] * saida_camada1[i];
			n += 1;
		}
		entrada_camada2[j] = soma;
		saida_camada2[j] = funcao_ativacao(entrada_camada2[j],funcao,curva);


		// Formata a saída em binário.
		if (saida_camada2[j] < 0.5)
		{
			saidas_formatadas_c2[j] = 0;
		}else{
			saidas_formatadas_c2[j] = 1;
		}

	}


	// Formatação dos neurônios da camada 1
	if (saidas_formatadas_c1[0] > 0.5)
		Shape1->Brush->Color = clRed;
	else
		Shape1->Brush->Color = clWhite;

	if (saidas_formatadas_c1[1] > 0.5)
		Shape2->Brush->Color = clRed;
	else
		Shape2->Brush->Color = clWhite;

	if (saidas_formatadas_c1[2] > 0.5)
		Shape3->Brush->Color = clRed;
	else
		Shape3->Brush->Color = clWhite;

	if (saidas_formatadas_c1[3] > 0.5)
		Shape4->Brush->Color = clRed;
	else
		Shape4->Brush->Color = clWhite;

	if (saidas_formatadas_c1[4] > 0.5)
		Shape5->Brush->Color = clRed;
	else
		Shape5->Brush->Color = clWhite;

	if (saidas_formatadas_c1[5] > 0.5)
		Shape6->Brush->Color = clRed;
	else
		Shape6->Brush->Color = clWhite;

	if (saidas_formatadas_c1[6] > 0.5)
		Shape7->Brush->Color = clRed;
	else
		Shape7->Brush->Color = clWhite;

	if (saidas_formatadas_c1[7] > 0.5)
		Shape8->Brush->Color = clRed;
	else
		Shape8->Brush->Color = clWhite;

	if (saidas_formatadas_c1[8] > 0.5)
		Shape9->Brush->Color = clRed;
	else
		Shape9->Brush->Color = clWhite;

	if (saidas_formatadas_c1[9] > 0.5)
		Shape10->Brush->Color = clRed;
	else
		Shape10->Brush->Color = clWhite;

	if (saidas_formatadas_c1[10] > 0.5)
		Shape11->Brush->Color = clRed;
	else
		Shape11->Brush->Color = clWhite;

	if (saidas_formatadas_c1[11] > 0.5)
		Shape12->Brush->Color = clRed;
	else
		Shape12->Brush->Color = clWhite;

	if (saidas_formatadas_c1[12] > 0.5)
		Shape13->Brush->Color = clRed;
	else
		Shape13->Brush->Color = clWhite;

	if (saidas_formatadas_c1[13] > 0.5)
		Shape14->Brush->Color = clRed;
	else
		Shape14->Brush->Color = clWhite;

	if (saidas_formatadas_c1[14] > 0.5)
		Shape15->Brush->Color = clRed;
	else
		Shape15->Brush->Color = clWhite;


	// Formatação dos neurônios da camada 2
	if (saidas_formatadas_c2[0] > 0.5)
		Shape16->Brush->Color = clRed;
	else
		Shape16->Brush->Color = clWhite;

	if (saidas_formatadas_c2[1] > 0.5)
		Shape17->Brush->Color = clRed;
	else
		Shape17->Brush->Color = clWhite;

	if (saidas_formatadas_c2[2] > 0.5)
		Shape18->Brush->Color = clRed;
	else
		Shape18->Brush->Color = clWhite;

	if (saidas_formatadas_c2[3] > 0.5)
		Shape19->Brush->Color = clRed;
	else
		Shape19->Brush->Color = clWhite;

	if (saidas_formatadas_c2[4] > 0.5)
		Shape20->Brush->Color = clRed;
	else
		Shape20->Brush->Color = clWhite;


	Chart2->Refresh();

}
//---------------------------------------------------------------------------

